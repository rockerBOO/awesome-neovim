---
name: Review Status Notifier
permissions: read-all

on:
  pull_request_review:
    types: [submitted]
  # Use pull_request_target for fork PRs to ensure write permissions
  pull_request_target:
    types: [opened, synchronize, ready_for_review]
  schedule:
    # Check for stale PRs daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:

jobs:
  # Separate job for handling individual PR review notifications
  notify-pr-review:
    if: github.event_name == 'pull_request_review' || github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read

    steps:
      - name: Checkout repository (secure for forks)
        uses: actions/checkout@v4
        with:
          # For pull_request_target, checkout the base branch, not the PR branch
          ref: ${{ github.event_name == 'pull_request_target' && github.event.repository.default_branch || github.ref }}

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber, prData;

            if (context.eventName === 'pull_request_review') {
              prNumber = context.payload.pull_request.number;
              prData = context.payload.pull_request;
            } else if (context.eventName === 'pull_request_target') {
              prNumber = context.payload.number;
              prData = context.payload.pull_request;
            }

            const isFromFork = prData.head.repo.full_name !== context.repo.owner + '/' + context.repo.repo;

            console.log(`PR #${prNumber} is from fork: ${isFromFork}`);
            console.log(`Head repo: ${prData.head.repo.full_name}`);
            console.log(`Base repo: ${context.repo.owner}/${context.repo.repo}`);

            core.setOutput('pr-number', prNumber);
            core.setOutput('is-fork', isFromFork);
            core.setOutput('pr-author', prData.user.login);
            core.setOutput('head-sha', prData.head.sha);

            return {
              prNumber,
              isFromFork,
              author: prData.user.login,
              headSha: prData.head.sha
            };

      - name: Post review status comment
        if: github.event_name == 'pull_request_review'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr-number }};
            const reviewer = context.payload.review.user.login;
            const reviewState = context.payload.review.state;
            const isFromFork = ${{ steps.pr-info.outputs.is-fork }};

            // Create appropriate status message
            const statusEmoji = reviewState === 'approved' ? '✅' :
                               reviewState === 'changes_requested' ? '❌' : '💬';

            const forkBadge = isFromFork ? ' 🔀' : '';

            const message = [
              `## ${statusEmoji} Review Status Update${forkBadge}`,
              '',
              `**PR #${prNumber}** has been reviewed by **@${reviewer}**`,
              `**Status**: ${reviewState.replace('_', ' ').toUpperCase()}`,
              isFromFork ? `**Source**: External fork contribution` : '',
              '',
              reviewState === 'changes_requested' ?
                '⚠️ **Action Required**: Please address the review feedback and push updates. The automated system will detect your changes and flag this PR for re-review.' :
                reviewState === 'approved' ?
                '🎉 **Great work!** This PR has been approved and is ready to merge.' :
                '💬 **Review feedback provided** - please check the review comments.',
              '',
              isFromFork ?
                '*Automated notification by review status tracking system (fork-safe mode)*' :
                '*Automated notification by review status tracking system*'
            ].filter(line => line !== '').join('\n');

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: message
              });
              console.log(`✅ Successfully posted review comment to PR #${prNumber} (fork: ${isFromFork})`);
            } catch (error) {
              console.error(`❌ Failed to post comment to PR #${prNumber}:`, error.message);
              console.error('Error details:', error.status, error.response?.data?.message);

              // For debugging: show what permissions we actually have
              const permissions = error.response?.headers?.['x-accepted-github-permissions'] || 'unknown';
              console.log(`Available permissions: ${permissions}`);

              throw error; // Re-throw to mark job as failed
            }

      - name: Post PR opened/updated notification
        if: github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr-number }};
            const prAuthor = '${{ steps.pr-info.outputs.pr-author }}';
            const isFromFork = ${{ steps.pr-info.outputs.is-fork }};
            const action = context.payload.action;

            if (action === 'opened') {
              const forkBadge = isFromFork ? ' 🔀' : '';

              const message = [
                `## 📝 PR Status Notification${forkBadge}`,
                '',
                `**PR #${prNumber}** has been opened by **@${prAuthor}**`,
                isFromFork ? `**Source**: External fork contribution` : `**Source**: Direct branch`,
                '',
                '🔍 **Status**: Awaiting initial review',
                '',
                isFromFork ?
                  '✨ Thank you for your contribution! A maintainer will review your PR soon.' :
                  '✨ PR is ready for review by the team.',
                '',
                '*Automated notification by review status tracking system*'
              ].filter(line => line !== '').join('\n');

              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: message
                });
                console.log(`✅ Posted welcome comment to PR #${prNumber} (fork: ${isFromFork})`);
              } catch (error) {
                console.error(`❌ Failed to post welcome comment:`, error.message);
                // Don't throw for welcome comments - they're nice-to-have
              }
            }

  # Separate job for daily status reports (only runs on schedule)
  daily-status-report:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze PR review status
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## 📊 PR Review Status Dashboard" > status_report.md
          echo "" >> status_report.md
          echo "*Last updated: $(date)*" >> status_report.md
          echo "" >> status_report.md

          # Get all open PRs with fork information
          echo "### Open PRs Analysis:" >> status_report.md
          echo "" >> status_report.md

          # Get PR data including fork status
          PR_DATA=$(gh pr list --state open --limit 20 --json number,author,headRepository,baseRepository --jq '.[] | {number: .number, author: .author.login, is_fork: (.headRepository.name != .baseRepository.name)}')

          if [ -n "$PR_DATA" ]; then
            echo "| PR | Author | Type | Status |" >> status_report.md
            echo "|---|---|---|---|" >> status_report.md

            echo "$PR_DATA" | jq -r '. as $pr | "\($pr.number)|\($pr.author)|\(if $pr.is_fork then "🔀 Fork" else "📝 Direct" end)|⏳ Analysis needed"' | while IFS='|' read -r pr_num author type status; do
              echo "| #$pr_num | @$author | $type | $status |" >> status_report.md
            done

            echo "" >> status_report.md

            # Get PR numbers for further analysis
            PR_LIST=$(echo "$PR_DATA" | jq -r '.number' | tr '\n' ' ')

            if [ -n "$PR_LIST" ] && [ -f "./scripts/batch_pr_compliance.sh" ]; then
              echo "Analyzing PRs: $PR_LIST"

              # Run compliance check if script exists
              ./scripts/batch_pr_compliance.sh $PR_LIST > status_output.txt 2>&1

              # Parse review status summary
              if grep -q "=== REVIEW STATUS SUMMARY ===" status_output.txt; then
                echo "### Compliance Summary:" >> status_report.md
                echo "" >> status_report.md
                grep -A 5 "=== REVIEW STATUS SUMMARY ===" status_output.txt | tail -n +2 >> status_report.md
                echo "" >> status_report.md
              fi

              # Extract priority PRs
              if grep -q "PRs Updated After Review (Priority for Re-review):" status_output.txt; then
                PRIORITY_PRS=$(grep -A 10 "PRs Updated After Review (Priority for Re-review):" \
                  status_output.txt | tail -n +2 | head -1)
                if [ -n "$PRIORITY_PRS" ] && [ "$PRIORITY_PRS" != "" ]; then
                  echo "### 🚨 URGENT: PRs Updated After Review" >> status_report.md
                  echo "The following PRs have been updated by contributors after receiving reviews:" >> status_report.md
                  echo "" >> status_report.md
                  echo "$PRIORITY_PRS" | tr ' ' '\n' | while read pr; do
                    if [ -n "$pr" ]; then
                      echo "- PR #$pr" >> status_report.md
                    fi
                  done
                  echo "" >> status_report.md
                fi
              fi
            else
              echo "### ℹ️ Limited Analysis" >> status_report.md
              echo "Detailed compliance analysis not available (script not found or no PRs to analyze)." >> status_report.md
              echo "" >> status_report.md
            fi

          else
            echo "No open PRs to analyze." >> status_report.md
          fi

          echo "" >> status_report.md
          echo "---" >> status_report.md
          echo "*Automated by [enhanced review status tracking](scripts/) - Fork-safe mode*" >> status_report.md

      - name: Create daily status issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('status_report.md', 'utf8');

            // Check if there are any priority items
            const hasPriorityItems = report.includes('🚨 URGENT');
            const title = hasPriorityItems ?
              `🚨 URGENT: Daily PR Status - ${new Date().toISOString().split('T')[0]}` :
              `📊 Daily PR Status Report - ${new Date().toISOString().split('T')[0]}`;

            const labels = hasPriorityItems ?
              ['maintenance', 'urgent', 'automated-report'] :
              ['maintenance', 'automated-report'];

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: `${report}\n\n*This is an automated daily status report with fork-safe analysis.*`,
              labels: labels
            });

      - name: Upload status artifacts
        uses: actions/upload-artifact@v4
        with:
          name: review-status-${{ github.run_number }}
          path: |
            status_report.md
            status_output.txt
          retention-days: 7
