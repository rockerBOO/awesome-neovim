---
name: PR Compliance Check
permissions:
  contents: read
  pull-requests: read

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  compliance-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For pull_request_target, checkout base branch for security
          ref: ${{ github.event_name == 'pull_request_target' && github.event.repository.default_branch || github.ref }}

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber, prData;
            
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              prData = context.payload.pull_request;
            } else if (context.eventName === 'pull_request_target') {
              prNumber = context.payload.number;
              prData = context.payload.pull_request;
            } else if (context.eventName === 'pull_request_review') {
              prNumber = context.payload.pull_request.number;
              prData = context.payload.pull_request;
            }
            
            const isFromFork = prData.head.repo.full_name !== context.repo.owner + '/' + context.repo.repo;
            
            core.setOutput('pr-number', prNumber);
            core.setOutput('is-fork', isFromFork);
            
            return { prNumber, isFromFork };

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run PR compliance check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## üîç PR Compliance Check Results" >> compliance_report.md
          echo "" >> compliance_report.md

          PR_NUMBER="${{ steps.pr-info.outputs.pr-number }}"
          IS_FORK="${{ steps.pr-info.outputs.is-fork }}"

          if [ "$IS_FORK" = "true" ]; then
            echo "**Source**: üîÄ External fork contribution" >> compliance_report.md
            echo "" >> compliance_report.md
          fi

          # Run compliance check for this PR
          if [ -f "./scripts/batch_pr_compliance.sh" ]; then
            ./scripts/batch_pr_compliance.sh "$PR_NUMBER" > compliance_output.txt 2>&1

            # Parse results for this PR
            if grep -q "‚úÖ PR $PR_NUMBER: Compliant" compliance_output.txt; then
              echo "‚úÖ **Status**: Compliant - All requirements met!" >> compliance_report.md
            elif grep -q "‚ùå" compliance_output.txt; then
              echo "‚ùå **Status**: Non-Compliant - Issues found that need fixing" >> compliance_report.md
              echo "" >> compliance_report.md
              echo "### Issues Found:" >> compliance_report.md
              grep "‚ùå PR $PR_NUMBER:" compliance_output.txt | sed 's/‚ùå PR [0-9]*: /- /' >> compliance_report.md
            fi

            echo "" >> compliance_report.md

            # Review status information
            if grep -q "üö®\|‚úÖ\|‚ÑπÔ∏è" compliance_output.txt; then
              echo "### Review Status:" >> compliance_report.md
              grep -E "(üö®|‚úÖ|‚ÑπÔ∏è) PR $PR_NUMBER:" compliance_output.txt | sed "s/PR $PR_NUMBER: //" >> compliance_report.md
              echo "" >> compliance_report.md
            fi
          else
            echo "‚ö†Ô∏è **Status**: Compliance script not found - manual review required" >> compliance_report.md
            echo "" >> compliance_report.md
          fi

          # Add helpful guidance
          if grep -q "‚ùå" compliance_output.txt 2>/dev/null; then
            echo "### Quick Fix Guide:" >> compliance_report.md
            echo "- **Title Format**: Use \`Add \\\`username/repo\\\`\`" >> compliance_report.md
            echo "- **Description**: Remove 'plugin' word, end with period" >> compliance_report.md
            echo "- **Repository**: Ensure public repo with README and license" >> compliance_report.md
            echo "" >> compliance_report.md
            echo "*After fixing issues, push new commits to update this check.*" >> compliance_report.md
          else
            echo "### Next Steps:" >> compliance_report.md
            if [ "$IS_FORK" = "true" ]; then
              echo "‚úÖ Thank you for your contribution!" >> compliance_report.md
              echo "üîç Ready for maintainer review" >> compliance_report.md
            else
              echo "‚úÖ Ready for manual review by maintainers" >> compliance_report.md
              echo "üîç Repository quality will be analyzed automatically" >> compliance_report.md
            fi
          fi

          echo "" >> compliance_report.md
          echo "---" >> compliance_report.md
          echo "*Automated check powered by [enhanced PR review scripts](scripts/)*" >> compliance_report.md

      - name: Post compliance results as comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance_report.md', 'utf8');
            const prNumber = ${{ steps.pr-info.outputs.pr-number }};

            try {
              // Find existing compliance comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });

              const existingComment = comments.data.find(comment =>
                comment.body.includes('üîç PR Compliance Check Results') &&
                comment.user.type === 'Bot'
              );

              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: report
                });
                console.log(`‚úÖ Updated compliance comment on PR #${prNumber}`);
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: report
                });
                console.log(`‚úÖ Posted compliance comment on PR #${prNumber}`);
              }
            } catch (error) {
              console.error(`‚ùå Failed to post compliance comment on PR #${prNumber}:`, error.message);
              
              // Show debugging info
              const permissions = error.response?.headers?.['x-accepted-github-permissions'] || 'unknown';
              console.log(`Available permissions: ${permissions}`);
            }
