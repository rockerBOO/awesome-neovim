---
name: PR Quality Analysis
permissions: read-all

on:
  pull_request:
    types: [opened, synchronize]
  schedule:
    # Run weekly to check repository health
    - cron: '0 6 * * 1'  # Monday at 6 AM UTC
  workflow_dispatch: {}

jobs:
  quality-analysis:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    env:
      ANALYSIS_TYPE: 'all_open'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine PRs to analyze
        id: get-prs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_numbers=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Always run all_open for workflow_dispatch
            echo "Getting all open PRs..."
            PR_LIST=$(gh pr list --state open --limit 20 --json number --jq '.[].number' | tr '\n' ',' | sed 's/,$//')
            echo "pr_numbers=$PR_LIST" >> $GITHUB_OUTPUT
          else
            # Scheduled run - get all open PRs
            PR_LIST=$(gh pr list --state open --limit 20 --json number --jq '.[].number' | tr '\n' ',' | sed 's/,$//')
            echo "pr_numbers=$PR_LIST" >> $GITHUB_OUTPUT
          fi

      - name: Run repository quality analysis
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## üîç Repository Quality Analysis" > quality_report.md
          echo "" >> quality_report.md

          PR_NUMBERS="${{ steps.get-prs.outputs.pr_numbers }}"

          if [ -n "$PR_NUMBERS" ]; then
            echo "Analyzing PRs: $PR_NUMBERS"

            # Convert comma-separated to space-separated
            PR_LIST=$(echo "$PR_NUMBERS" | tr ',' ' ')

            # Run quality analysis
            ./scripts/batch_pr_readme_review.sh $PR_LIST > quality_output.txt 2>&1

            # Parse results for report
            echo "### Analysis Results:" >> quality_report.md
            echo "" >> quality_report.md

            # Extract priority PRs
            if grep -q "üö® PRIORITY:" quality_output.txt; then
              echo "#### üö® Priority PRs (Updated After Review):" >> quality_report.md
              grep -A 10 "üö® PRIORITY:" quality_output.txt | grep "=== Priority README Review for PR" | sed 's/=== Priority README Review for PR /- PR /' >> quality_report.md
              echo "" >> quality_report.md
            fi

            # Extract PRs needing review
            if grep -q "üìã Processing PRs needing initial review" quality_output.txt; then
              echo "#### üìã PRs Needing Initial Review:" >> quality_report.md
              grep -A 10 "üìã Processing PRs needing initial review" quality_output.txt | grep "=== README Review for PR" | sed 's/=== README Review for PR /- PR /' >> quality_report.md
              echo "" >> quality_report.md
            fi

            # Extract summary
            if grep -q "=== README REVIEW SUMMARY ===" quality_output.txt; then
              echo "#### Summary:" >> quality_report.md
              grep -A 5 "=== README REVIEW SUMMARY ===" quality_output.txt | tail -n +2 >> quality_report.md
              echo "" >> quality_report.md
            fi

            # Add repository health warnings
            if grep -q "‚ö†Ô∏è WARNING" quality_output.txt; then
              echo "#### ‚ö†Ô∏è Repository Health Warnings:" >> quality_report.md
              grep "‚ö†Ô∏è WARNING" quality_output.txt | sed 's/‚ö†Ô∏è WARNING: /- /' >> quality_report.md
              echo "" >> quality_report.md
            fi

            # Add license information
            if grep -q "‚úÖ License found" quality_output.txt; then
              echo "#### ‚úÖ License Status:" >> quality_report.md
              grep -A 2 "‚úÖ License found" quality_output.txt | head -3 >> quality_report.md
              echo "" >> quality_report.md
            fi

          else
            echo "No PRs to analyze at this time." >> quality_report.md
          fi

          echo "---" >> quality_report.md
          echo "*Quality analysis powered by [enhanced repository review scripts](scripts/)*" >> quality_report.md

          # Save output for artifacts
          cp quality_output.txt quality_analysis_raw.txt 2>/dev/null || true

      - name: Post quality analysis for single PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality_report.md', 'utf8');

            // Find existing quality comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('üîç Repository Quality Analysis') &&
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      - name: Create issue for scheduled analysis
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality_report.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Repository Quality Report - ${new Date().toISOString().split('T')[0]}`,
              body: `${report}\n\n*This is an automated weekly quality analysis.*`,
              labels: ['maintenance', 'automated-report']
            });

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quality-analysis-${{ github.run_number }}
          path: |
            quality_report.md
            quality_analysis_raw.txt
          retention-days: 30
